---
title: Jackal build on ROS melodic
subtitle: Jackal software build from scratch
layout: default
modal-id: 12
date: 2019-01-25
img: jackal-build.jpg
thumbnail: jackal-build-thumbnail.jpg
alt: image-alt
project-date: September 2019
category: Web Development
description: <h3>Overview</h3> This project aimed to bring the ClearPath Jackal up to a running state along with a Velodyne LIDAR on ROS melodic (which at the time of writing is not supported by ClearPath). ClearPath has a release image with all the necessary set up for ROS kinetic but not for ROS melodic yet, as such some packages had to be built from source and certain issues (such as networking and udev rules) had to be trouble shot. <br> To see a comprehensive walk-through visit <a href="https://github.com/robo-jordo/jackal_melodic_bringup">jackal_melodic_bringup.</a><br> <br> <h3>Brief process</h3> <br> <h5>Wireless Network set up</h5> In order to allow easy and reliable connection to the jackal, A dedicated wireless router was set up. The router was set up to bind the mac addresses of my laptop and the Jackal to static IP addresses on the router. This allowes for setting static IPs to match a hostname in the /etc/hosts files on both the laptop and the Jackal for easy hostname resolution. <h5>ROS install and packages</h5> Since the Jackal is running Ubuntu 18.04 the installation of ROS melodic is very straight forward using apt-get. After ROS melodic is installed most of the packages needed for the Jackal are available as melodic packages through apt-get with the exception of the <a href="https://github.com/jackal/jackal">jackal</a> and <a href="https://github.com/jackal/jackal_robot">jackal_robot</a> packages. These packages need to be built from source. Building these packages from source is also relatively straight forward, they can be cloned into a catkin workspace on the Jackal, they have all the dependencies properly listed so rosdep can be run first to build all the dependencies of both packages. Once all the dependencies for these packages have been installed simply running catkin_make should build these two packages from scratch without any problems. <br> Running Gazebo simulations of the Jackal can be done on your computer. The <a href="http://www.clearpathrobotics.com/assets/guides/jackal/">Clearpath tutorials</a>  are very helpful in setting up these simulations. <h5>ROS over the network</h5> A single ROS master can be shared between the Jackal and your local computer if they are the same network. This is helpful in visualizing data while running the Jackal in headless mode. In order to achieve this the ROS_MASTER_URI and ROS_HOSTNAME environment variables need to be set properly on the Jackal and your local computer. <h5>Communication between Jackal and motor board</h5> Some system debugging needed to be done in order to get the Jackal communicating with the motor driver board. This is owing to a udev rule that creates a device in /dev called jackal. This udev rule needs to be implemented and then the ClearPath nodes for the Jackal will be able to send and receive data from the motor board. <h5>Interfacing with the LIDAR</h5> In order to interface with VLP-16 LIDAR the Jackal needs to be set up to communicate over the correct network interface. The velodyne documentation provides an IP address for the LIDAR. By setting the Jackals static IP address to be in the same range as the LIDAR, it will be able to read information from the LIDAR on the LIDARs IP. This is achieved by setting the static IP for the relevant network interface in the /etc/network/interfaces file. Once the Jackal is set up correctly you can ping the IP address of the lidar to check that they can connect and you can view the Velodyne LIDAR portal by visiting the IP address of the LIDAR through a browser if you still have a screen connected to the Jackal computer. The point cloud data can then be published to ROS topics by installing the ros-melodic-velodyne-pointcloud package from apt-get and using the VLP16_points.launch launch file. In addition a static tf transform needs to be established from the "base_link" of the Jackal to the "velodyne" link. <h5>Booting into a working state</h5> In order for the Jackal to boot into a working state, systemd services can be implemented to launch the relevant ROS nodes for moving the Jackal and get blue-tooth into a state to connect with the PS3 remote. This can also be used to set up the relevant tf static transforms and bring up the Velodyne nodes. <br><br> <h3> Useful packages and set up</h3> Once the Jackal has been set up fully the 3D lidar can be compressed to a laserscan using the ros-melodic-pointcloud-to-laserscan package from apt-get. This allows all the examples included in the <a href="http://www.clearpathrobotics.com/assets/guides/jackal/">Jackal simulation tutorials</a> to be run on the real Jackal. Along with this full 3D mapping can be done with the 3D LIDAR by using the octomap package. <br> Some examples of the above capabilities running can be seen here. <div align="center"><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/rl_qqtuZsGw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div><br><br>To see more you can visit <a href="https://github.com/robo-jordo/jackal_melodic_bringup">Jackal melodic bringup</a>

---
